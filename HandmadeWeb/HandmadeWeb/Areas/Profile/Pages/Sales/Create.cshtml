@page
@model HandmadeWeb.Areas.Profile.Pages.Sales.CreateModel

@section Links {
    <link rel="stylesheet" href="~/css/profile-form.css" />
}

<form class="profile-form" method="post" enctype="multipart/form-data">
    <h2>Добавить новый продукт</h2>
    <div asp-validation-summary="ModelOnly" class="error"></div>

    <label class="profile-form__label">Название продукта</label>
    <input asp-for="Product.Name" class="profile-form__input" aria-required="true" placeholder="Введите название" />
    <span asp-validation-for="Product.Name" class="error"></span>

    <label class="profile-form__label">Описание</label>
    <textarea asp-for="Product.Description" class="profile-form__textarea" aria-required="true" placeholder="Введите описание"> </textarea>
    <span asp-validation-for="Product.Description" class="error"></span>

    <label class="profile-form__label">Изображение</label>
    <input type="file" name="image" />

    <label class="profile-form__label">Цена</label>
    <input asp-for="Product.Price" class="profile-form__input" aria-required="true" placeholder="Введите цену" />
    <span asp-validation-for="Product.Price" class="error"></span>



    <label class="profile-form__label">Количество</label>
    <select asp-for="Product.Quantity" class="profile-form__input" aria-required="true">
        @for(int i = 1; i <= 100; i++)
        {
            <option value="@i">@i</option>            
        }
    </select>

    <label class="profile-form__label">Категория</label>
    <select asp-for="Product.CategoryId" class="profile-form__input" asp-items="ViewBag.CategoryId"></select>

    <button value="Create" class="profile-form__button" type="submit">Создать</button>
</form>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>

        $.validator.methods.range = function (value, element, param) {
            var globalizedValue = value.replace(",", ".");
            return this.optional(element) || (globalizedValue >= param[0] && globalizedValue <= param[1]);
        }

        $.validator.methods.number = function (value, element) {
            return this.optional(element) || /-?(?:\d+|\d{1,3}(?:[\s\.,]\d{3})+)(?:[\.,]\d+)?$/.test(value);
        }

    </script>
}
